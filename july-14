Given an array arr consisting of only 0's and 1's in random order. Modify the array in-place to segregate 0s onto the left side and 1s onto the right side of the array.

Examples :

Input: arr[] = [0, 0, 1, 1, 0]
Output: [0, 0, 0, 1, 1]
Explanation:  After segregation, all the 0's are on the left and 1's are on the right. Modified array will be [0, 0, 0, 1, 1].
Input: arr[] = [1, 1, 1, 1]
Output: [1, 1, 1, 1]
Explanation: There are no 0s in the given array, so the modified array is [1, 1, 1, 1]
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ arr.size() ≤ 106
0 ≤ arr[i] ≤ 1

solution :-

class Solution {
    void segregate0and1(int[] arr) {
        // code here
        int l=arr.length;
        int i,ocount=0,zcount=0;
        for(i=0;i<l;i++)
        {
            if(arr[i]==0)
            {
                zcount=zcount+1;
            }
            else{
                ocount=ocount+1;
            }
        }
        int all=zcount+ocount;
        for(i=0;i<zcount;i++)
        {
            arr[i]=0;
        }
        for(i=zcount;i<all;i++)
        {
            arr[i]=1;
        }
    }
}
// works right gives no TLE :
