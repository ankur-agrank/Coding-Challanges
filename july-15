Given two integers s and d. The task is to find the smallest number such that the sum of its digits is s and the number of digits in the number are d. Return a string that is the smallest possible number. If it is not possible then return -1.

Examples:

Input: s = 9, d = 2
Output: 18 
Explanation: 18 is the smallest number possible with the sum of digits = 9 and total digits = 2.
Input: s = 20, d = 3 
Output: 299 
Explanation: 299 is the smallest number possible with the sum of digits = 20 and total digits = 3.
Expected Time Complexity: O(d)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ s ≤ 100
1 ≤ d ≤ 6

solution :-

class Solution {
    public String smallestNumber(int s, int d) {
        // code here
        int a=0,n=0,temp,b,sum,diff,i,j;
        if(s>9*d)
        {
            return "-1";
        }
        switch (d)
        {
            case 1:
                n=9;
                a=1;
                break;
            case 2:
                n=99;
                a=10;
                break;
            case 3:
                n=999;
                a=100;
                break;
            case 4:
                n=9999;
                a=1000;
                break;
            case 5:
                n=99999;
                a=10000;
                break;
            case 6:
                n=999999;
                a=100000;
                break;
        }
        diff=n;
        for(i=n;i>=a;i--)
        {
            sum=0;
            for(temp=i,j=d;j>0;j--)
            {
                b=temp%10;
                sum=sum+b;
                temp=temp/10;
            }
            if(sum==s && sum<diff)
            diff=i;
        }
        String str1=Integer.toString(diff);
        return str1;
    }
}

// not optimised solution , gives TLE :
